using Microsoft.AspNetCore.Mvc;
// using Microsoft.EntityFrameworkCore; // Remove EF Core
using AnastasiiaPortfolio.Models;
// using AnastasiiaPortfolio.Data; // Remove EF Core Data
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity; // Add Identity
using MongoDB.Driver; // Add MongoDB
using MongoDB.Bson; // Add Bson
using System.Linq; // Add Linq
using System; // Add System

namespace AnastasiiaPortfolio.Controllers
{
    public class RateController : Controller
    {
        // Replace DbContext with IMongoDatabase and add UserManager
        private readonly IMongoCollection<Review> _reviewsCollection;
        private readonly UserManager<ApplicationUser> _userManager; // Added in case user context is needed

        public RateController(IMongoDatabase database, UserManager<ApplicationUser> userManager)
        {
            _reviewsCollection = database.GetCollection<Review>("Reviews");
            _userManager = userManager;
        }

        public async Task<IActionResult> Index()
        {
            var reviews = await _reviewsCollection.Find(_ => true)
                .Sort(Builders<Review>.Sort.Descending(r => r.CreatedAt))
                .ToListAsync();
            return View(reviews);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        // Add [Authorize] ? Seems like creating a review should require login
        public async Task<IActionResult> Create([Bind("Rating,Comment,Name,Title,Pros,Cons")] Review review) // Bind appropriate fields
        {
            // Re-enable validation check
            if (ModelState.IsValid)
            {
                // Optional: Get current user and assign UserId
                // var user = await _userManager.GetUserAsync(User);
                // if (user != null) review.UserId = user.Id;

                review.CreatedAt = DateTime.UtcNow;
                // review.Id = Guid.NewGuid(); // Id should be generated by constructor or MongoDB

                await _reviewsCollection.InsertOneAsync(review);

                // Return the new review as a partial view
                return PartialView("_ReviewPartial", review);
            }
            // If validation fails, extract errors and return BadRequest or PartialView with errors
            var errors = ModelState.Values.SelectMany(v => v.Errors.Select(e => e.ErrorMessage));
            // You might want to return a specific JSON structure for errors if the client expects it
            return BadRequest(new { errors }); // Or return PartialView with model state
        }

        // POST: Rate/Delete/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Delete(Guid id) // Change id to Guid
        {
            var reviewFilter = Builders<Review>.Filter.Eq(r => r.Id, id);
            var review = await _reviewsCollection.Find(reviewFilter).FirstOrDefaultAsync(); // Find first to potentially check info
            if (review == null)
            {
                return NotFound();
            }

            // Also delete associated ReviewVotes if they exist for this review
            await _reviewsCollection.Database.GetCollection<ReviewVote>("ReviewVotes").DeleteManyAsync(v => v.ReviewId == id);

            var result = await _reviewsCollection.DeleteOneAsync(reviewFilter);
            if (result.DeletedCount == 0)
            {
                return NotFound(); // Might have been deleted between find and delete
            }

            return RedirectToAction(nameof(Index));
        }
    }
} 